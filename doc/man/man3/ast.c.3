.TH "euler/parser/ast.c" 3 "Thu Feb 13 2020" "Euler Computer Algebra System" \" -*- nroff -*-
.ad l
.nh
.SH NAME
euler/parser/ast.c
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./inc/euler\&.h'\fP
.br
\fC#include 'ast\&.h'\fP
.br
\fC#include 'grammar\&.h'\fP
.br
\fC#include 'symbol_table\&.h'\fP
.br
\fC#include <stdlib\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBast_init\fP (ersl_t *euler)"
.br
.ti -1c
.RI "void \fBast_finalize\fP (ersl_t *euler)"
.br
.ti -1c
.RI "ast_t ** \fBast_find_parent\fP (ersl_t *euler, ast_t *child)"
.br
.ti -1c
.RI "ast_t * \fBast_destroy_node\fP (ersl_t *euler, ast_t *node)"
.br
.ti -1c
.RI "void \fBast_relink_node\fP (ersl_t *euler, ast_t *child, ast_t *new_child)"
.br
.ti -1c
.RI "ast_t * \fBast_get_root\fP (ersl_t *euler)"
.br
.ti -1c
.RI "uint8_t \fBast_get_root_idx\fP (ersl_t *euler)"
.br
.ti -1c
.RI "ast_t * \fBast_add_leaf\fP (ersl_t *euler, uint8_t \fBtype\fP)"
.br
.ti -1c
.RI "ast_t * \fBast_add_leaf_const\fP (ersl_t *euler, uint8_t \fBtype\fP, double \fBvalue\fP)"
.br
.ti -1c
.RI "ast_t * \fBast_add_leaf_literal\fP (ersl_t *euler, uint8_t \fBtype\fP, char \fBvalue\fP)"
.br
.ti -1c
.RI "uint8_t \fBast_get_available_slots\fP (ersl_t *euler)"
.br
.ti -1c
.RI "ast_t * \fBast_add_node\fP (ersl_t *euler, uint8_t \fBtype\fP, ast_t *ast_left, ast_t *ast_right)"
.br
.ti -1c
.RI "void \fBprint_tree_recursive\fP (FILE *fp, ast_t *curr)"
.br
.ti -1c
.RI "void \fBast_print\fP (ast_t *tree)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "ast_t* ast_add_leaf (ersl_t * euler, uint8_t type)"

.SS "ast_t* ast_add_leaf_const (ersl_t * euler, uint8_t type, double value)"

.SS "ast_t* ast_add_leaf_literal (ersl_t * euler, uint8_t type, char value)"

.SS "ast_t* ast_add_node (ersl_t * euler, uint8_t type, ast_t * ast_left, ast_t * ast_right)"

.SS "ast_t* ast_destroy_node (ersl_t * euler, ast_t * node)"

.SS "void ast_finalize (ersl_t * euler)"

.SS "ast_t** ast_find_parent (ersl_t * euler, ast_t * child)"

.SS "uint8_t ast_get_available_slots (ersl_t * euler)"

.SS "ast_t* ast_get_root (ersl_t * euler)"

.SS "uint8_t ast_get_root_idx (ersl_t * euler)"

.SS "void ast_init (ersl_t * euler)"

.SS "void ast_print (ast_t * tree)"

.SS "void ast_relink_node (ersl_t * euler, ast_t * child, ast_t * new_child)"

.SS "void print_tree_recursive (FILE * fp, ast_t * curr)"

.SH "Author"
.PP 
Generated automatically by Doxygen for Euler Computer Algebra System from the source code\&.
